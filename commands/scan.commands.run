nmap-parse-output host/_target_.tcp.top1000.xml service 'ftp' | cut -d ':' -f2 | while read p; do nmap.exe -Pn -sSV -p $p --script=vuln,vulscan/vulscan.nse,banner,ftp-anon,ftp-bounce,ftp-syst -oA "ftp/_target_.$p.script" _target_  > /dev/null 2>&1 & tail --pid=$! -f /dev/null 2>&1; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ftp' | cut -d ':' -f2 | while read p; do ncrack  -v -U "/mnt/c/Users/Max Berrutto/Documents/Github/APE/brute-force/usernames.ftp.txt" -P "/mnt/c/Users/Max Berrutto/Documents/Github/APE/brute-force/passwords.ftp.txt" -p ftp:$p -oA "ftp/_target_.$p.ncrack" _target_; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssh' | cut -d ':' -f2 | while read p; do nmap.exe -Pn -sSV -p $p --script=vuln,vulscan/vulscan.nse,banner,ssh-auth-methods,sshv1 -oA "ssh/_target_.$p.script" _target_  > /dev/null 2>&1 & tail --pid=$! -f /dev/null 2>&1; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssh' | cut -d ':' -f2 | while read p; do ssh-audit _target_:$p > "ssh/_target_.$p.sshaudit.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssh' | cut -d ':' -f2 | while read p; do sshUsernameEnumExploit --port $p --userList "/mnt/c/Users/Max Berrutto/Documents/Github/APE/brute-force/common_usernames.small.txt" --outputFormat list --outputFile "ssh/_target_.$p.sshUsernameEnumExploit" _target_ > /dev/null 2>&1; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssh' | cut -d ':' -f2 | while read p; do ncrack  -v -U "/mnt/c/Users/Max Berrutto/Documents/Github/APE/brute-force/usernames.ssh.txt" -P "/mnt/c/Users/Max Berrutto/Documents/Github/APE/brute-force/passwords.ssh.txt" -p ssh:$p -oA "ssh/_target_.$p.ncrack" _target_; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'smtp' | cut -d ':' -f2 | while read p; do nmap.exe -Pn -sSV -p $p --script=vuln,vulscan/vulscan.nse,banner,smtp-open-relay,smtp-commands -oA "smtp/_target_.$p.script" _target_  > /dev/null 2>&1 & tail --pid=$! -f /dev/null 2>&1; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'smtp' | cut -d ':' -f2 | while read p; do smtp-user-enum -U "/mnt/c/Users/Max Berrutto/Documents/Github/APE/brute-force/common_usernames.small.txt" -M VRFY -t _target_ -p $p > "/home/maxpowersi/Downloads/firehydrant/scan/smtp/_target_.$p.smtp-user-enum.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'smtp' | cut -d ':' -f2 | while read p; do checker -t _target_ -p $p -o  "/home/maxpowersi/Downloads/firehydrant/scan/smtp/_target_.$p.openRelayMagic.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'domain' | cut -d ':' -f2 | while read p; do nmap.exe -Pn -sSV -p $p --script=vuln,vulscan/vulscan.nse,banner,dns-cache-snoop,dns-recursion -oA "dns/_target_.$p.script" _target_  > /dev/null 2>&1 & tail --pid=$! -f /dev/null 2>&1; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ms-wbt-server' | cut -d ':' -f2 | while read p; do nmap.exe -Pn -sSV -p $p --script=vuln,vulscan/vulscan.nse,banner,rdp-ntlm-info,rdp-vuln-ms12-020 -oA "rdp/_target_.$p.script" _target_  > /dev/null 2>&1 & tail --pid=$! -f /dev/null 2>&1; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ms-wbt-server' | cut -d ':' -f2 | while read p; do ncrack  -v -U "/mnt/c/Users/Max Berrutto/Documents/Github/APE/brute-foce/usernames.rdp.txt" -P "/mnt/c/Users/Max Berrutto/Documents/Github/APE/brute-force/passwords.rdp.txt" -p rdp:$p -oA "rdp/_target_.$p.ncrack" _target_; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'telnet' | cut -d ':' -f2 | while read p; do nmap.exe -Pn -sSV -p $p --script=vuln,vulscan/vulscan.nse,banner,telnet-ntlm-info -oA "/home/maxpowersi/Downloads/firehydrant/scan/telnet/_target_.$p.script" _target_  > /dev/null 2>&1 & tail --pid=$! -f /dev/null 2>&1; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'telnet' | cut -d ':' -f2 | while read p; do ncrack  -v -U "/mnt/c/Users/Max Berrutto/Documents/Github/APE/brute-force/usernames.telnet.txt" -P "/mnt/c/Users/Max Berrutto/Documents/Github/APE/brute-force/passwords.telnet.txt" -p ssh:$p -oA "/home/maxpowersi/Downloads/firehydrant/scan/telnet/_target_.$p.ncrack" _target_; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'http' | cut -d ':' -f2 | while read p; do nmap.exe -Pn -sSV -p $p --script=banner,vuln,vulscan/vulscan.nse,http-enum,http-webdav-scan,http-backup-finder,http-trace _target_ -oN "http/_target_.$p.script.nmap.txt" > /dev/null 2>&1 & tail --pid=$! -f /dev/null 2>&1; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'http' | cut -d ':' -f2 | while read p; do getJS -url http://_target_:$p -resolve -complete -output http/_target_.$p.getJS.txt -verbose > /dev/null 2>&1; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'http' | cut -d ':' -f2 | while read p; do nikto -maxtime 15m -output  "http/_target_.$p.nikto.txt" -host http://_target_:$p > /dev/null; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'http' | cut -d ':' -f2 | while read p; do curl -i -s -o "http/_target_.$p.curl.txt" "http://_target_:$p"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'http' | cut -d ':' -f2 | while read p; do wappalyzer "http://_target_:$p" > "http/_target_.$p.wappalyzer.json"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'http' | cut -d ':' -f2 | while read p; do webscreenshot.py --no-xserver -r phantomjs -o "http/" "http://_target_:$p" > /dev/null; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'http' | cut -d ':' -f2 | while read p; do echo "http://_target_:$p" | aquatone.exe -silent -out "http/_target_.$p.aquatone" > /dev/null 2>&1; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'http' | cut -d ':' -f2 | while read p; do webtech -u "http://_target_:$p" > "http/_target_.$p.webtech.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'http' | cut -d ':' -f2 | while read p; do waybackurls "http://_target_:$p" > "http/_target_.$p.waybackurls.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'http' | cut -d ':' -f2 | while read p; do photon -u "http://_target_:$p" -o "http/_target_.$p.photon" -e csv > /dev/null 2>&1; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'http' | cut -d ':' -f2 | while read p; do goohak "http://_target_:$p" > "http/_target_.$p.goohak.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'http' | cut -d ':' -f2 | while read p; do hakrawler -url "http://_target_:$p" -all > "http/_target_.$p.hakrawler.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'http' | cut -d ':' -f2 | while read p; do dirhunt "http://_target_:$p" > "http/_target_.$p.dirhunt.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'http' | cut -d ':' -f2 | while read p; do h2t scan "http://_target_:$p" > "http/_target_.$p.h2t.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'http' | cut -d ':' -f2 | while read p; do corsy -u "http://_target_:$p" -o "_target_.$p"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'http' | cut -d ':' -f2 | while read p; do cat "http://_target_:$p" > "_target_.$p.corstest.input.txt"; corstest "_target_.$p.corstest.input.txt" > "http/_target_.$p.corstest.txt"; rm  "_target_.$p.corstest.input.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'http' | cut -d ':' -f2 | while read p; do see-surf -H "http://_target_:$p" > "http/_target_.$p.see-surf.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'http' | cut -d ':' -f2 | while read p; do gospider -s "http://_target_:$p" -o "http/_target_.$p.gospider" -c 10 -d 2; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'http' | cut -d ':' -f2 | while read p; do xsstrike -u "http://_target_:$p" --crawl -l 4 > "http/_target_.$p.xsstrike.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'http' | cut -d ':' -f2 | while read p; do fockcache --hostname "http://_target_:$p" > "http/_target_.$p.fockcache.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssl' | cut -d ':' -f2 | while read p; do sslscan "_target_:$p" > "https/_target_.$p.sslscan.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssl' | cut -d ':' -f2 | while read p; do timeout 1200 testssl --openssl-timeout 1200 "_target_:$p" > "https/_target_.$p.testssl.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'https' | cut -d ':' -f2 | while read p; do sslscan "_target_:$p" > "https/_target_.$p.sslscan.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'https' | cut -d ':' -f2 | while read p; do timeout 1200 testssl --openssl-timeout 1200 "_target_:$p" > "https/_target_.$p.testssl.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssl' | cut -d ':' -f2 | while read p; do nmap.exe -Pn -sSV -p $p --script=banner,vuln,vulscan/vulscan.nse,http-enum,http-webdav-scan,http-backup-finder,http-trace _target_ -oN "https/_target_.$p.script.nmap.txt" > /dev/null 2>&1 & tail --pid=$! -f /dev/null 2>&1; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssl' | cut -d ':' -f2 | while read p; do getJS -url https://_target_:$p -resolve -complete -output https/_target_.$p.getJS.txt -verbose > /dev/null 2>&1; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssl' | cut -d ':' -f2 | while read p; do nikto -maxtime 15m -output  "https/_target_.$p.nikto.txt" -host https://_target_:$p > /dev/null; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssl' | cut -d ':' -f2 | while read p; do curl -i -s -o "https/_target_.$p.curl.txt" "https://_target_:$p"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssl' | cut -d ':' -f2 | while read p; do wappalyzer "https://_target_:$p" > "https/_target_.$p.wappalyzer.json"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssl' | cut -d ':' -f2 | while read p; do webscreenshot.py --no-xserver -r phantomjs -o "https/" "https://_target_:$p" > /dev/null; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssl' | cut -d ':' -f2 | while read p; do echo "https://_target_:$p" | aquatone.exe -silent -out "https/_target_.$p.aquatone" > /dev/null 2>&1; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssl' | cut -d ':' -f2 | while read p; do webtech -u "https://_target_:$p" > "https/_target_.$p.webtech.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssl' | cut -d ':' -f2 | while read p; do waybackurls "https://_target_:$p" > "https/_target_.$p.waybackurls.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssl' | cut -d ':' -f2 | while read p; do photon -u "https://_target_:$p" -o "https/_target_.$p.photon" -e csv > /dev/null 2>&1; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssl' | cut -d ':' -f2 | while read p; do goohak "https://_target_:$p" > "https/_target_.$p.goohak.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssl' | cut -d ':' -f2 | while read p; do hakrawler -url "https://_target_:$p" -all > "https/_target_.$p.hakrawler.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssl' | cut -d ':' -f2 | while read p; do dirhunt "https://_target_:$p" > "https/_target_.$p.dirhunt.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssl' | cut -d ':' -f2 | while read p; do h2t scan "https://_target_:$p" > "https/_target_.$p.h2t.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssl' | cut -d ':' -f2 | while read p; do corsy -u "https://_target_:$p" -o "_target_.$p"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssl' | cut -d ':' -f2 | while read p; do cat "https://_target_:$p" > "_target_.$p.corstest.input.txt"; corstest "_target_.$p.corstest.input.txt" > "https/_target_.$p.corstest.txt"; rm  "_target_.$p.corstest.input.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssl' | cut -d ':' -f2 | while read p; do see-surf -H "https://_target_:$p" > "https/_target_.$p.see-surf.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssl' | cut -d ':' -f2 | while read p; do gospider -s "https://_target_:$p" -o "https/_target_.$p.gospider" -c 10 -d 2; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssl' | cut -d ':' -f2 | while read p; do xsstrike -u "https://_target_:$p" --crawl -l 4 > "https/_target_.$p.xsstrike.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'ssl' | cut -d ':' -f2 | while read p; do fockcache --hostname "https://_target_:$p" > "https/_target_.$p.fockcache.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'https' | cut -d ':' -f2 | while read p; do nmap.exe -Pn -sSV -p $p --script=banner,vuln,vulscan/vulscan.nse,http-enum,http-webdav-scan,http-backup-finder,http-trace _target_ -oN "https/_target_.$p.script.nmap.txt" > /dev/null 2>&1 & tail --pid=$! -f /dev/null 2>&1; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'https' | cut -d ':' -f2 | while read p; do getJS -url https://_target_:$p -resolve -complete -output https/_target_.$p.getJS.txt -verbose > /dev/null 2>&1; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'https' | cut -d ':' -f2 | while read p; do nikto -maxtime 15m -output  "https/_target_.$p.nikto.txt" -host https://_target_:$p > /dev/null; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'https' | cut -d ':' -f2 | while read p; do curl -i -s -o "https/_target_.$p.curl.txt" "https://_target_:$p"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'https' | cut -d ':' -f2 | while read p; do wappalyzer "https://_target_:$p" > "https/_target_.$p.wappalyzer.json"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'https' | cut -d ':' -f2 | while read p; do webscreenshot.py --no-xserver -r phantomjs -o "https/" "https://_target_:$p" > /dev/null; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'https' | cut -d ':' -f2 | while read p; do echo "https://_target_:$p" | aquatone.exe -silent -out "https/_target_.$p.aquatone" > /dev/null 2>&1; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'https' | cut -d ':' -f2 | while read p; do webtech -u "https://_target_:$p" > "https/_target_.$p.webtech.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'https' | cut -d ':' -f2 | while read p; do waybackurls "https://_target_:$p" > "https/_target_.$p.waybackurls.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'https' | cut -d ':' -f2 | while read p; do photon -u "https://_target_:$p" -o "https/_target_.$p.photon" -e csv > /dev/null 2>&1; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'https' | cut -d ':' -f2 | while read p; do goohak "https://_target_:$p" > "https/_target_.$p.goohak.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'https' | cut -d ':' -f2 | while read p; do hakrawler -url "https://_target_:$p" -all > "https/_target_.$p.hakrawler.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'https' | cut -d ':' -f2 | while read p; do dirhunt "https://_target_:$p" > "https/_target_.$p.dirhunt.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'https' | cut -d ':' -f2 | while read p; do h2t scan "https://_target_:$p" > "https/_target_.$p.h2t.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'https' | cut -d ':' -f2 | while read p; do corsy -u "https://_target_:$p" -o "_target_.$p"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'https' | cut -d ':' -f2 | while read p; do cat "https://_target_:$p" > "_target_.$p.corstest.input.txt"; corstest "_target_.$p.corstest.input.txt" > "https/_target_.$p.corstest.txt"; rm  "_target_.$p.corstest.input.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'https' | cut -d ':' -f2 | while read p; do see-surf -H "https://_target_:$p" > "https/_target_.$p.see-surf.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'https' | cut -d ':' -f2 | while read p; do gospider -s "https://_target_:$p" -o "https/_target_.$p.gospider" -c 10 -d 2; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'https' | cut -d ':' -f2 | while read p; do xsstrike -u "https://_target_:$p" --crawl -l 4 > "https/_target_.$p.xsstrike.txt"; done
nmap-parse-output host/_target_.tcp.top1000.xml service 'https' | cut -d ':' -f2 | while read p; do fockcache --hostname "https://_target_:$p" > "https/_target_.$p.fockcache.txt"; done
